KINEMATICS OF AN INFINITE SNAKE ROBOT

@0. Introduction.

@1. Deriving snake kinematics.

@1.0.
In what follows, we will work with certain infinite-dimensional manifolds 
in a rather synthetic manner. Formally, this involves an extension of the
usual category of C^∞, finite-dimensional manifolds and C^∞ maps, with
suitable properties. There are many possible choices of such a category,¹
and the resulting algebraic object we're interested in -- the Lie algebra of 
vector fields generated by lifts of Euclidean translations to the snake's 
reduced configuration space -- is invariant. Thus, on one hand, we will 
proceed with its construction assuming the spaces and maps make sense in
a suitable category; on the other hand, in section 2 we'll reformulate the
Main Theorem in a purely algebraic setting; the core section 3 of the paper
is devoted to proving this purely algebraic formulation.

[1] In particular, any well-adapted model of Synthetic Differential Geometry
(see Moerdijk and Reyes, _Models for Smooth Infinitesimal Analysis_). In fact,
it is enough to have limits of sequences of locally trivial fibrations of 
finite-dimensional manifolds, and then to work with Lie algebras of projectable 
vector fields. Indeed, one could express the entire construction in terms of 
sequences of finite-dimensional manifolds, at the cost of index bookkeeping 
completely obscuring the intuitive geometric picture. 

@1.1.
The snake lives in a Euclidean plane E. Its basic building block
is a single segment. The configuration of a single segment is
parameterised by a pair of points at unit distance. These pairs
form a double circle fibration:

    pr₁, pr₂ : S → E;    S = { (p,q) | |p-q|=1 } ⊂ E × E.

The motion of the segment is uniquely determined by
the motion of one of its endpoints. Correspondingly, there
is a rank two distribution

    D_S ⊂ TS

fitting into a commutative diagram

              D_S

     pr₁_* ↓       ↓ pr₂_*

    pr₁^* TE   →   pr₂^* TE
               Φ
of isomorphisms of vector bundles over S. Evaluating Φ at s=(p,q) ∈ S,
we have that 

    Φ_s : T_p E → T_q E
 
is a _reflection_ in the line pq, followed by parallel transport.

@1.2.
Now, the configuration space of an infinite snake is an infinite
fibre product

    M = S ×_E S ×_E S ×_E …

where S is viewed as fibred over E using pr₁ on the left and pr₂ 
on the right. It follows that M carries a rank two distribution

    D = D_S ×_TE D_S ×_TE …

    ∩           ∩

   TM = TS  ×_TE TS  ×_TE … 

Consider the projections

     head   tail                head(s₁,s₂,s₃,…) = s₁
    S  ←  M  →  M               tail(s₁,s₂,s₃,…) = (s₂,s₃,…)

together with

    nose = pr₁ ∘ head : M → E
    neck = pr₂ ∘ head : M → E

        neck = nose ∘ tail. 

Note that we get a coinductive¹ description of M:

    〈head, tail 〉: M ≃ S ×_E M

Now, in particular the map

    nose_* : TM → nose^* TE

restricts to an _isomorphism_ on the rank 2 distribution D ⊂ TM.

[1] _Coinductive,_ because it exhibits M as a _final coalgebra_
for the endofunctor S ×_E - on the category of locally trivial fibre 
bundles over E

@1.3.
Consider the translation action of ℝ² on E, and the induced actions
on S, M, their tangent bundles and so on. Note that the distributions
D_S and D are translation invariant, and the maps head, tail, etc. 
defined above are equivariant. We may consider the reduced configuration
space 

    M♭ = M/ℝ², 

along with its coinductive description

    〈hd, tl 〉: M♭ ≃ T × M♭ 

where T ⊂ ℝ² is the unit circle, identified with S/ℝ². This in particular
exhibits M♭ as an infinite torus, parameterising orientations of the
infinite snake while forgetting the position of its nose.

@1.4.
Let ℝ² → X(E) be the infinitesimal action map, an isomorphism onto
the space of translation-invariant vector fields. Inverting the 
isomorphism

    nose_* : D → nose^* TE

gives rise to a map of vector fields

    ∇ : X(E) → Γ(M,D),  (T_m nose)(∇υ) = υ_{nose m}

restricting to a lifting of translation-invariant fields. Following
with projection M → M♭, we have a map

                     ∇
  ξ : ℝ² → X(E)^{ℝ²} → Γ(M,D)^{ℝ²} → X(M)^{ℝ²} → X(M♭).

The group O(2) acts on ℝ², T as well as E, S, M, etc. so that all 
the relevant maps are equivariant. In particular, the action
descends to M♭ so that ξ is O(2)-equivariant.

*Main Theorem.* Consider G = SO(1,2), with maximal compact subgroup
O(2) ⊂ G, and a Cartan involution θ acting on the Lie algebra g
with even eigenspace so(2) and odd eigenspace ℝ² (as O(2)-modules).
Let 

    L₊ = { f(t) ∈ t g[t] | f(-t) = θ f(t) } = Σ_{i>0} L_i

be the positive part of the corresponding twisted loop algebra,
with L_{2i} ≃ so(2), L_{2i+1} ≃ ℝ². Then there exists an 
O(2)-equivariant Lie algebra homomorphism 

    ξ⁺ : L₊ → X(M♭) 

such that the following diagram commutes:

    L₁ ⊂ L₊ 
  ≃ ↓    ↓ ξ⁺
    ℝ² → X(M♭).
       ξ 

Furthermore, ξ⁺ is injective, and thus an isomorphism onto
the sub-algebra generated by the image of ξ in X(M♭).

@1.5.
Consider the 2:1 map 

  γ : T → O(2)

parameterising reflections so that γ_u u = u for all u ∈ T. We may
view γ as a translation quotient of Φ. 

*Lemma.* ∀ m ∈ M♭, v ∈ ℝ². (T_m tl)ξ(v)_m = ξ(γ_{hd m} v)_{tl m}.

Proof. Identifying ℝ² with X(E)^{ℝ²}, let υ = ∇v and let m' ∈ M be a 
lift of m ∈ M♭. Then

    (T_m' head)(υ_m') ∈ D_{S, head m'}

and thus

    (T_{tail m'}nose)(T_m' tail)(υ_m') = (T_m' neck)(υ_m')
                                       = Φ_{head m'} (T_m' nose)(υ_m') 
                                       = Φ_{head m'} v

by commutativity of the diagram defining D_S. Since 

    tail_* : D → tail^* D
    nose_* : D → nose^* TE 

are isomorphisms over M, it follows that 

    (T_m' tail)(∇v)_m' = ∇(γ_{hd m} v)_{tail m'}
   
descending along M → M♭ to the desired identity at m ∈ M♭. □

The lemma is equivalent to commutativity of the following diagram

        hd^* γ       triv.
  M♭ × ℝ²  →  M♭ × ℝ²  →  tl^* (M♭ × ℝ²)
   ξ ↓                         ↓ tl^* ξ
     TM♭          →         tl^* TM♭
                tl_* 

of vector bundles over M♭, where hd^*γ is an endomorphism of the
trivial ℝ²-bundle induced by the composite γ ∘ hd : M♭ → O(2),
and we identify ξ with a bundle morphism M♭ × ℝ² → TM♭.

@1.6.
Lemma 1.5. provides a corecursive description of ξ, with respect to
the coinductive description of M♭ in terms of hd, tl. It expresses 
the tail part of ξ as a twist of ξ by hd^* γ. Our strategy for proving
the main theorem will be to use similar corecursive descriptions of
iterated Lie brackets of vector fields in the image of ξ. More succintly,
we seek recursion relations for the Lie algebra homomorphism 

  ξ~ : FL(ℝ²) → X(M♭)

from the free Lie algebra on ℝ² ≃ L₁, in order to show that it descends
along the quotient map FL(L₁) → L₊. 

This task will be simplified if we twist the tail map tl by a reflection:
then the recursion relation will be expressed in terms of rotations only,
and these can be simultaneously diagonalised upon complexification. To this
end, let

  ρ : T → SO(2)

be the 1:1 parameterisation of rotations, so that ρ_u(e₁)=u. Consider the
_twisted tail map_

  tl~ : M♭ → M♭,  tl~(m) = γ_{e₁} ρ_{hd(m)}^{-1} tl(m).

Note that it still leads to a coinductive description

  〈hd, tl~〉: M♭ ≃ T × M♭.

Intuitively, if we used 〈hd, tl 〉iteratively to identify M♭ with an intinite
torus, we'd be parameterising the snake's oriention in terms of the angle each
segment makes with e₁. On the other hand, if we used 〈hd, tl~〉, we would be
using the angle the head makes with e₁, and then the angle each subsequent segment
makes with the previous one, measured with alternating orientations. For instance,
the point on the infinite torus with all angular coordinates equal corresponds to:
a straight-line snake in the former case; and a zig-zag snake in the latter. 

        a)   /     b)   _   
            /         _/
           /         /
          /               
  
  (π/4,π/4,…) ∈ T^∞ ≃ M♭
    using (a) 〈hd,tl 〉
      and (b) 〈hd,tl~〉

*Lemma.* tl~ ∘ γ_{e₁} = γ_{e₁} ∘ tl~.

Proof. By O(2)-equivariance of the head map hd and untwisted tail map tl,

    tl~(γ_{e₁}m) = γ_{e₁} ρ_{γ_{e₁} hd(m)}^{-1} γ_{e₁} tl(m)
                 = ρ_{hd(m)}^{-1} tl(m)
                 = γ_{e₁} tl~(m)

for m ∈ M♭. □

@1.7.
Consider the action map
    act ∘ ρ  : T  → Diff(M♭, M♭),
its differential
    α : TT → X(M♭)
and the associated evaluation map
    α. : M♭ × TT → TM♭.

*Lemma.* ∀ m ∈ M♭, v ∈ T_m M♭. 
  (T_m tl~)(v) = γ_{e₁} ρ_{hd(m)}^{-1} ∙ [ (T_m tl)(v) - α_{tl m} (T_m hd)(v) ]
                                         
Note that the right hand side involves an element of O(2) acting on […] ∈ T_{tl m} M♭,
and belongs to T_{tl~ m} M♭. 

Proof. This is an immediate application of the chain rule to tl~, where we note
that -α is the differential of act ∘ ρ⁻¹. □

This result may be understood intuitively as follows. Consider a snake whose nose
is located at the origin of a Cartesian frame with unit vectors e₁, e₂. The map tl
may be viewed as cutting off the head of the snake, and moving the frame by translation
to the new nose. On the other hand, the map tl~ constructs a _new_ frame with origin at
the new nose: its orientation is opposite to the previous one, and its first axis is
in the direction of the severed head. Thus, given an infinitesimal motion of the snake,
its images under tl and tl~, besides being expressed in different frames, differ by
a term arising from an infinitesimal rotation of the frame itself. The latter term
is the α_{tl m} (T_m hd)(v) in the Lemma.

@1.8.
Let ω = e₁ ∧ e₂, viewed interchangeably as an element of Λ²ℝ², its dual, or so(2);
in the latter case, 〈ω(u),v 〉= ω(u,v) for u,v ∈ ℝ². Write ω~ ∈ X(M♭) for the 
corresponding infinitesimal action. 

*Lemma.* ∀ m ∈ M♭, v ∈ ℝ². (T_m tl~)(ξ(v)_m) = [ ξ(ρ_{hd(m)}^{-1} v) - ω(hd m, v) ω~ ]_{tl~ m}

Proof. 

Combining Lemmas 1.5 and 1.7, we have:

  (T_m tl~)ξ(v)_m = γ_{e₁} ρ_{hd(m)}^{-1} ∙ [ ξ(γ_{hd m} v)_{tl m} - α_{tl m} (T_m hd)(ξ(v)_m) ] 
                  = ξ(ρ_{hd(m)}^{-1} v)_{tl~ m} + α_{tl~ m} (T_m hd)(ξ(v)_m) 

for all m ∈ M♭, v ∈ ℝ², where we used γ_u = ρ_u γ_{e₁} ρ_u^{-1}. Now, using

  (T_m hd) ξ(v)_m = (γ_{hd m}-1) v / 2

and

  (T_u ρ)(v) = ω(u,v) ω

we have

  α((T_m hd)(ξ(v)_m)) = ω(hd m, -v) ω~

and the claim follows. □  

@2. Abstracting the algebra.

@2.0.

@2.1.
Define the Lie algebra homomorphism

  σ : X(M♭) → X(M♭)

by

  hd_* (σ υ) = 0,  tl~_* (σ υ) = tl~^* υ

for all υ ∈ X(M♭). This is a `shift map', sending
an infinitesimal motion of the snake, to that same
motion applied to the (twisted) tail, with head immobile.

Complexify everything, and introduce the notation

    z : M♭ → ℂ,     z(m) = 〈e₁ + ie₂, hd m 〉

    ∂_z ∈ X_ℂ(M♭),  ∂_z z = 1,  tl~_* ∂_z = 0

where 〈-,- 〉 is the complex bilinear extension of the usual
scalar product on ℝ². 

That is, z is the usual unimodular complex coordinate
on T, pulled back by hd to M♭, while ∂_z is the corresponding
complex vector field on T, realised as an infinitesimal motion
of the head, with (twisted) tail immobile.

Let

    ζ^± = ξ(e₁ ± ie₂) ∈ X_ℂ(M♭).

*Proposition.* ζ^± = z^{±1} [ ± z ∂_z + σ (ζ^± ± z ∂_z) ]

Proof. Let v^± = e₁ ± ie₂. For all u ∈ T we have:

    i. ρ_u v^±  = w(u)^{∓1} v^± 
   ii. ω(u,v^±) = ±i w(u)^{±1}  
  iii. ω ∈ so(2) acts on T as iw ∂_w

where w(u) = 〈v⁺, u 〉. Indeed, letting u = (cos φ, sin φ), w(u) = e^{iφ}
ρ_u e₁ = u, ρ_u e₂ = (-sin φ, cos φ), so 

    ρ_u v^± = (e^{∓iφ}, ±i e^{∓iφ}) = w^{∓1} v^±.

Also, ω(u,v^±)= ±i e^{±iφ} = ±i w^{±1}. Lastly, dw = i w dφ so that
∂_φ = iw ∂_w.

Now, in X_ℂ(M♭), we claim that

   iv. ω~ = iz ∂_z.

Indeed, tl~_* ω~ = 0 by Lemma 1.7 and hd_* ω~ = iw ∂_w by (iii).

Let us rewrite Lemma 1.8 in the above notation: for all
m ∈ M♭, v ∈ ℂ²,

    (T_m tl~) ξ(v^±)_m = z^{±1}(m) [ ξ(v^±) ∓ i ω~ ]_{tl~ m}
    (T_m tl~) ζ^±_m    = z^{±1}(m) [ ζ^± ± z ∂_z ]_{tl~ m}.

On the other hand,

    (T_m hd) ξ(v^±)_m  = ω(hd m, -v^±) ∂_φ 
    (T_m hd) ζ^±_m     = ± w(hd m)^{1±1} ∂_w

where w = e^{iφ} : T → ℂ as before. Finally, recalling z = hd^* w along
with tl~_* ∂_z = 0 and hd_* ∘ σ = 0, we have 

    ζ^± = ± z^{1±1} ∂_z + z^{±1} σ ( ζ^± ± z ∂_z )
        = z^{±1} [ ± z ∂_z + σ (ζ^± ± z ∂_z) ].                 □


@2.2.
*Definition.* An _ambient module_ is a complex Lie algebra Ω
together with
    
      elements      e, h, f ∈ Ω           
      maps          τ, σ, z : Ω → Ω         

where

 * e,h,f are linearly independent and satisfy
   [h,e]=e, [h,f]=-f, [f,e]=2h                     (sl₂)
 * τ is an involutive Lie algebra  automorphism    (flip)
 * σ is an injective  Lie algebra  endomorphism    (shift)
 * z is an invertible vector space endomorphism,   (twist)
   transcendental over ℂ                           

and they satisfy the following relations:

 * τ e = -f, τ f = -e, τ h = -h                                    in Ω (flip-sl₂)
 * τ ∘ z = z⁻¹ ∘ τ                                           in Hom_ℂ Ω (flip-twist)
 * τ ∘ σ = σ ∘ τ                                             in Hom_ℂ Ω (flip-shift)
 * ∀ φ ∈ ℂ[z,z⁻¹], x ∈ Ω .    [ad_{φ σ x}, z] = 0            in Hom_ℂ Ω (shift-twist) 
 * ∀ φ ∈ ℂ[z,z⁻¹], x ∈ {e,h,f}.  ad_{φ x} ∘ σ = 0            in Hom_ℂ Ω (shift-sl₂)
 * ∀ φ ∈ ℂ[z,z⁻¹], x ∈ {e,h,f}. [ad_{φ x}, z] = φ z^{1+λ(x)} in Hom_ℂ Ω (twist-sl₂)

where λ(e)=1, λ(h)=0, λ(f)=-1, and by transcendence of z we 
identify the abstract Laurent algebra ℂ[z,z⁻¹] with the sub-
algebra generated by z and its inverse in End_ℂ Ω.

Note that an ambient module is simultaneously a module for the
Laurent algebra ℂ[z,z⁻¹], and for the Lie algebra sl₂(ℂ)≃〈e,h,f〉
(where our h is half of the usual one!). These two structures
are compatible with respect to the usual action of sl₂(ℂ) on Laurent
polynomials: e as z²∂_z, h as z∂_z, f as ∂_z. Furthermore, the 
involution τ is compatible with an involution on the Laurent 
algebra sending z to 1/z. Finally, relations with the shift map 
mean that σΩ commutes with ℂ[z,z⁻¹]∙sl₂(ℂ), while the adjoint action
of ℂ[z,z⁻¹]∙σΩ on Ω is ℂ[z,z⁻¹]-linear in the `passive' argument. 

*Lemma.* X_ℂ(M♭) has the structure of an ambient module as suggested
by notation, with e=z²∂_z, h=z∂_z, f=∂_z, and with τ induced by the
action of γ_{e₁} ∈ O(2).

Proof. Note that γ_{e₁}^* z = 1/z. Then relations flip-sl₂ and flip-twist
follow immediately. Next, flip-shift is a consequence of Lemma 1.6., while
shift-twist and shift-sl₂ hold because hd_* ∘ σ = 0 and tl~_* ∂_z = 0, 
respectively. Finally, twist-sl₂ follows by letting e,h,f as defined in terms
of ∂_z act on z. □

We will consider this ambient module structure on X_ℂ(M♭) as canonical.

*Definition.* An element ζ of an ambient module Ω is called _serpentine_
if it satisfies ζ = e + z σ (ζ + h).

Note that a serpentine element is non-zero: for if zero were serpentine,
we would have 0=z⁻²[e,0]=z⁻²[e,e+zσh]=σh, contradicting injectivity of σ. 
We will refer to the τ-invariant Lie subalgebra generated by a serpentine element
as a _serpentine subalgebra._

*Lemma.* ζ⁺ is serpentine in X_ℂ(M♭), and ζ⁻ = τ ζ⁺.

Proof. By Prop. 2.1, we have

        ζ⁺ = z^2 ∂_z + z σ (ζ⁺ + z ∂_z) = e + z σ (ζ⁺ + h)

so that ζ⁺ is serpentine. Furthermore, since ξ is O(2)-equivariant,
it follows that

        ζ⁻ = ξ(v⁻) = ξ(γ_{e₁}v⁺) = γ_{e₁} ξ(v⁺) = τ ζ⁺.     □

@2.3.
*Definition.* A _σ-filtration_ on an ambient module Ω is a
decreasing filtration F^∙Ω by ℂ[z,z⁻¹]-submodules such that:

  * F⁰Ω = Ω,
  * sl₂(ℂ) → Ω/F¹Ω is injective,
  * σ F^k Ω ⊂ F^{k+1} Ω for all k ≥ 0.

We say that Ω is _separated_ (respectively _complete_) if it
admits a σ-filtration such that the natural map

    Ω → lim_k Ω / F^k Ω

is injective (respectively an isomorphism).

*Lemma.* Let Ω be an ambient module. If Ω is separated (respectively
complete), it has at most one (respectively exactly one) serpentine
element.

Proof. Let F^∙Ω be the σ-filtration exhibiting Ω as a separated ambient
module. Then two serpentine elements differ by an element of 

    ∩_k F^k Ω = 0.

Furthermore if Ω is complete, the operator 1 - z σ : Ω → Ω is invertible
and

    ζ = (1 - z σ)⁻¹ (e + z σ h)

is serpentine. □

*Lemma.* X_ℂ(M♭) is a complete ambient module.

Proof. Write Ω = X_ℂ(M♭). Recalling M = S ×_E S ×_E … and passing to
the quotient by the translation group, we have M♭ = T × T × … with
factor projections

    seg_k = hd ∘ tl ∘ … ∘ tl : M♭ → T   (k-1 compositions)

Define a decreasing filtration F^∙TM♭ by F^k TM♭ = ∩_{l≤k} ker Tseg_l.
By construction, the natural map 

    TM♭ → lim_k TM♭ / F^k TM♭

is an isomorphism (of vector bundles over M♭). The same then holds for
the twisted version 

    TM♭ → lim_k TM♭ / F~^k TM♭

where F~^k TM♭ = ∩_{l≤k} ker Tseg~_l for
    
    seg~_k = hd ∘ tl~ ∘ … ∘ tl~ : M♭ → T   (k-1 compositions).

Applying the exact functor Γ(M♭, ℂ ⊗ -) of complexified smooth sections,
we obtain an _isomorphism_

     Γ(M♭, ℂ ⊗ TM♭) ≃ Ω → lim Ω / F^k Ω ≃ Γ(M♭, ℂ ⊗ lim TM♭ / F~^k TM♭)

where F^k Ω = Γ(M♭, ℂ ⊗ F~^k TM♭) define a filtration F^∙Ω of Ω. By the
defining properties of σ, we have σ F^k Ω ⊂ F^{k+1} Ω. Furthermore, by
construction, each F^k Ω is a ℂ[z,z⁻¹]-submodule (being the space of
sections of a vector bundle over M♭). Hence F^∙Ω is a σ-filtration. □

@2.4.
*Theorem.* Let Ω be a separated ambient module. Identify 〈e,h,f〉⊂ Ω
with sl₂(ℂ), and consider the positive (twisted) loop algebra 

    L₊^ℂ = { x(t) ∈ t sl₂(ℂ)[t] | x(-t) = (1 - 2 ad²_h) x(t) } 
         = Σ_{i>0} L_i^ℂ

together with the induced involution τ. Then, for any serpentine
ζ ∈ Ω, there is a unique τ-equivariant Lie algebra homomorphism

  Ψ : L₊^ℂ → Ω

sending e ∈ L₁^ℂ to ζ. Furthermore, Ψ is injective, and thus an
isomorphism onto the Lie subalgebra generated by ζ and τζ in Ω.

@2.5.
Theorem 2.3. states that a serpentine subalgebra in a separated
ambient module is isomorphic to the positive loop algebra of sl₂(ℂ).
We'll prove this in the next section. Now, let's use it to prove
the Main Theorem of 1.4.

*Proof of the Main Theorem.*
Recall g = so(1,2) with Cartan involution Θ inducing an O(2)-equivariant
decomposition

    g = so(2) + ℝ²,     so(2) = ℝ〈ω 〉,  ℝ² = ℝ〈e₁,e₂ 〉

Complexifying and extending θ by linearity, we have

    g_ℂ = so₂(ℂ) + ℂ²

and there is a complex Lie algebra isomorphism

    β : g_ℂ → sl₂(ℂ)

such that β(ω) = ih, β(e₁) = (e+f)/2, β(e₂) = (e-f)/2i.

Restricting β to ℂ² = ker(θ+1) we have a vector space isomorphism

    β₁ : ℂ ⊗ L₁ → L₁^ℂ

extending to a complex Lie algebra isomorphism

    β₊ : ℂ ⊗ L₊ → L₊^ℂ.    

This aligns the definition of L₊^ℂ in Theorem 2.3 with the
definition of L₊ in the Main Theorem.

Now, using the two Lemmas in 2.2, we have an injective Lie algebra
homomorphism

  Ψ : L₊^ℂ → X_ℂ(M♭) 

such that Ψ(e) = ζ⁺, Ψ(f) = ζ⁻. The composite

  ξ⁺_ℂ = Ψ ∘ β₊ : ℂ ⊗ L₊ → X_ℂ(M♭) 
      
then fits into a diagram

   ℂ ⊗ L₁ ⊂ ℂ ⊗ L₊ 
   ≃ ↓        ↓ ξ⁺_ℂ
    ℂ²  →   X_ℂ(M♭).
      ℂ ⊗ ξ 

All four spaces in the above diagram carry a natural action of the
Galois group Γ of ℂ/ℝ, generated by complex conjugation. The generator's
action on X_ℂ(M♭) interchanges e with f, and sends h to -h. This induces 
an action of Γ on L₊^ℂ such that Ψ is Γ-equivariant. Next, the map

    β₁ : ℂ ⊗ L₁ → L₁^ℂ 

is immediately seen to be Γ-equivariant. It follows that so is β₊,
and thus also ξ⁺_ℂ = Ψ ∘ β₊. As a consequence, ξ⁺_ℂ is the complex-linear
extension of a homomorphism

    ξ⁺ : L₊ → X(M♭),

fitting into the diagram defined in the statement of the Theorem (a
real form of the diagram above).

@3. Proving Theorem 2.3.

@3.0. 
We are now in the purely algebraic setting of a separated ambient module.
We will examine the relations between iterated Lie brackets of a serpentine
element and its conjugate under the involution, using only the defining
equation ζ = e + z σ (ζ + h). It will be fun.

Throughout this secion we will work with various objects (in various
categories) equipped with a distinguished involutive automorphism. We will
denote the latter genericaly by τ; if we want to be more specific, we shall
write e.g. τ_A : A → A, etc.

We erase all notation of the previous sections, save for that of
Definition 2.2 and Theorem 2.3, so that we can reuse symbols such as ω.

@3.1. 
Fix the alphabet A = {a,b} and let W ⊃ A be the _free semigroup_
on A (i.e. the set of finite, non-empty sequences of elements of A). We
refer to elements of A as _generators_ and denote them generically by α;
we refer to elements to W as _words_  and denote them generically by w.
We equip A with the non-identity involution τ_A, and extend it to an
involutive semigroup automorphism τ_W : W → W.

We'll often use the following simple induction scheme:

*Lemma.* Let P ⊂ W be a subset satisfying:
  1. τ P = P
  2.   a ∈ P
  3. a P ⊂ P
Then P = W.

Proof. Use (1) and induction on l(w) to show w ∈ P for all w ∈ W. □

Define the following semigroup homomorphisms (for the additive structure
on the codomain):

    l   : W → ℕ,      l(a) = l(b) = 1          (length)
    wt  : W → ℤ,      wt(a)=1, wt(b)=-1        (weight)

Define also the function

    μ   : W → ℤ,      μ(α)=wt(α),   μ(αw) = (wt(α) wt(w) - 1) μ(w).

*Lemma.* l(τw)=l(w), wt(τw)=-wt(w), μ(τw)=-μ(w)

Put differently, l, wt and μ commute with involution τ, where we put
τ_ℕ = 1 and τ_ℤ = -1.

Proof. The first two are immediate. For the third, we have
μ(τα)=wt(τα)=-wt(α)=-μ(α) as the base step. Assuming
μ(τw)=-μ(w), compute

 μ(τ(αw)) = μ((τα)(τw)) 
          = (wt(τα) wt(τw) - 1) μ(τw) 
          = -(wt(α) wt(w) - 1) μ(w) 
          = -μ(αw). 

Then the claim follows by induction.                    □

@3.2. 
From now on fix a separated ambient module Ω, and identify sl₂ with the subalgebra
spanned by e,h,f in Ω. 

Given x ∈ Ω, the evaluation bracket

    ⟦ - ⟧_x : W → Ω

is defined inductively by:

    ⟦a⟧_x = x, ⟦b⟧_x = τ x, ⟦αw⟧_x = [ ⟦α⟧_x,⟦w⟧_x ]

for α ∈ A, w ∈ W.

*Lemma.* ⟦τw⟧_x = τ ⟦w⟧_x.

Proof. By induction on w. □  

We will use two such maps: ⟦ - ⟧_e : W → sl₂ and ⟦ - ⟧_ζ : W → Ω for a serpentine ζ ∈ Ω.
The former interprets a word of W as an element of sl₂: an iterated, right-associating
Lie bracket reading every a as e, and every b as -f. The latter interprets the word in
the serpentine Lie algebra generated by ζ. In particular, the image ⟦W⟧_ζ spans the 
serpentine Lie algebra as a vector space.

*Lemma.* [ ad ⟦w⟧_e, z ] = μ(w) z^{1 + wt(w)} in End Ω.

Proof. We use the induction lemma 3.1. Let P ⊂ W be the set of words w ∈ W satisfying 
the above equality. Note that if w ∈ P, then

 [ ad ⟦τw⟧_e, z ] = τ [ ad ⟦w⟧_e, z⁻¹ ] 
                  = -τ μ(w) z^{-1 + wt(w)}
                  = -μ(w) z^{1 - wt(w)}
                  = μ(τ w) z^{1 + wt(τ w)}

so that τ w ∈ P. Furthermore, if w ∈ P, then

 [ ad ⟦aw⟧_e, z ] = [ ad [ e, ⟦w⟧_e ], z ]
                  = [ [ ad e, ad ⟦w⟧_e ], z ]
                  = [ ad e, [ ad ⟦w⟧_e , z ] ] - [ ad ⟦w⟧_e, [ ad_e, z ] ]
                  = [ ad e, μ(w) z^{1 + wt(w)} ] - [ ad ⟦w⟧_e, z² ]
                  = μ(w) (1 + wt w) z^{2 + wt(w)} - 2 μ(w) z^{2 + wt(w)}
                  = μ(w) (wt w - 1) z^{1 + wt(aw)}
                  = μ(aw) z^{1 + wt(aw)}

so that aw ∈ P. □ 
 
@3.3. 
Let ℂW denote the semigroup algebra of W; that is, a free vector space on the set W,
with a non-unital algebra structure is induced by the semigroup structure on W. The involution 
τ_W induces an involutive algebra automorphism τ_{ℂW} of ℂW.

Define a linear map

    ω : ℂW → ℂW

by ω(w) = wt(w) w for w ∈ W. 

*Lemma.* ω ∘ τ = - τ ∘ ω.

Proof. ω(τw) = wt(τw) τw = -τ wt(w) w = -τ ω(w).

Next, we define the crucial _rest map_

    R : W → ℂW

    R(α)  = 0,
    R(αw) = α R(w) + wt(α) (wt(w) R(w) + ω R(w) + 2 wt(w) w - 2 μ(w) α)

for α ∈ A, w ∈ W. 

*Lemma.* R ∘ τ = τ ∘ R.

Proof. We proceed by induction on w ∈ W. The base case is trivial. Assume
R(τ w)=τ R(w). Then

    R(τ (α w)) = R((τα)(τw))
               = τα R(τw) + wt(τα) (wt(τw) R(τw) + ω R(τw) + 2 wt(τw) τw - 2 μ(τw) τα)
               = (τα) τR(w) - wt(α) (-wt(w) τR(w) - τ ω R(w) - 2 wt(w) τw + 2 μ(w) τα)
               = τ α R(w) + τ wt(α)(wt(w) R(w) + ω R(w) + 2 wt(w) w - 2 μ(w) α)
               = τ R(w)

completing the inductive step.  □ 

@3.4. 
Given x ∈ Ω, we extend the bracket evaluation map ⟦ - ⟧_x : W → Ω
to a linear map

    ⟦ - ⟧_x : ℂW → Ω.

It is obviously τ-equivariant.

@3.5.
Let us first collect some results on the action of sl₂. 

*Lemma.*  Let ζ ∈ Ω be serpentine. Then:

  1. [h, ζ] = ζ, [e, ζ] = z (ζ - e), [f, ζ] = z⁻¹(ζ - e) + 2h 
  2. [h, ⟦w⟧_ζ] = wt(w) ⟦w⟧_ζ   for w ∈ W
  3. [h, ⟦r⟧_ζ] = ⟦ω r⟧_ζ       for r ∈ ℂW

Proof. For (1), we use the serpentine equation:

  [e, ζ] = [e, e + z σ (ζ + h)] = z² σ (ζ + h) = z (ζ - e)
  [h, ζ] = [h, e + z σ (ζ + h)] = e + z σ (ζ + h) = ζ
  [f, ζ] = [f, e + z σ (ζ + h)] = 2h + σ (ζ + h) = z⁻¹ (ζ - e) + 2h.

For (2), we use [h, ζ] = ζ and [h, τζ] = τ[-h,ζ]=-τζ and proceed
by induction on w. The base case is follows from (1), and for the
inductive case, assuming the formula holds for w ∈ W, calculate:

  [h, ⟦αw⟧_ζ] = [h, [ ⟦α⟧_ζ, ⟦w⟧_ζ ] ]
              = [[h, ⟦α⟧_ζ], ⟦w⟧_ζ ] + [ ⟦α⟧_ζ, [ h, ⟦w⟧_ζ ] ]
              = [wt(α)⟦α⟧_ζ, ⟦w⟧_ζ] +  [ ⟦α⟧_ζ, wt(w) ⟦w⟧_ζ ]
              = wt(αw)⟦αw⟧_ζ.

Finally, (3) follows from (2) by linearity. □

*Proposition.* Let ζ ∈ Ω be serpentine. Then

     ⟦w⟧_ζ = ⟦w⟧_e + z^{wt w} σ ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ )
   
for all w ∈ W.

Proof. Let P ⊂ W be the subset of elements w ∈ W satisfying the above
identity. We claim P = W. First let us check that τ P = P: assuming
w ∈ P, we have 

     ⟦τw⟧_ζ = τ( ⟦w⟧_e + z^{wt w} σ ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ) )
            = ⟦τw⟧_e + z^{-wt w} σ ( ⟦τw⟧_ζ - μ(τw) τh + τ⟦R(w)⟧_ζ )
            = ⟦τw⟧_e + z^{wt τw} σ ( ⟦τw⟧_ζ + μ(τw) h + ⟦R(τw)⟧_ζ )

so that τ w ∈ P.

Next, a ∈ P by definition of a serpentine element:

     ⟦a⟧_ζ = ζ = e + z σ (ζ + h) = ⟦a⟧_e + z^{wt(a)} σ (⟦a⟧_ζ + μ(a) h + ⟦R(a)⟧_ζ).

By the above induction lemma we now only need to show that w ∈ P ⇒ aw ∈ P.
Assuming w ∈ P, we have:

     ⟦a⟧_ζ = e + z σ (ζ + h)
     ⟦w⟧_ζ = ⟦w⟧_e + z^{wt w} σ ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ )

so that

     ⟦aw⟧_ζ = [ ⟦a⟧_ζ, ⟦w⟧_ζ ]
            = [ e + z σ (ζ + h), ⟦w⟧_e + z^{wt w} σ ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ) ]
            = [ e, ⟦w⟧_e ] + z^{1 + wt w} σ [ ζ + h, ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ]
                           + wt(w) z^{1 + wt w} σ ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ) 
                           - μ(w) z^{1 + wt w} σ ( ζ + h )
            = ⟦aw⟧_e + z^{wt(aw)} σ E

where

    E = [ ζ + h, ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ] 
      + wt(w) ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ) 
      - μ(w)  ( ζ + h ).

We use Lemma 3.5.1. to compute the Lie brackets:

    [ζ + h, ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ] = ⟦aw⟧_ζ - μ(w) ζ + ⟦a R(w)⟧_ζ
                                        + wt(w) ⟦w⟧_ζ + ⟦ω R(w)⟧_ζ.

Substituting, we get:

    E = ⟦aw⟧_ζ - μ(w) ζ + ⟦a R(w)⟧_ζ
      + wt(w) ⟦w⟧_ζ + ⟦ω R(w)⟧_ζ.
      + wt(w) ( ⟦w⟧_ζ + μ(w) h + ⟦R(w)⟧_ζ ) 
      - μ(w)  ( ζ + h )
      = ⟦aw⟧_ζ + μ(w) (wt(w)-1) h
      + ⟦a R(w)⟧_ζ - 2 μ(w) ζ + 2 wt(w) ⟦w⟧_ζ + ⟦ω R(w)⟧_ζ
      + wt(w) ⟦R(w)⟧_ζ 
      = ⟦aw⟧_ζ + μ(w) (wt(w)-1) h + ⟦R'⟧_ζ 

where

    R'    = a R(w) + wt(w) R(w) + ω R(w) + 2 wt(w) w - 2 μ(w) a 
          = R(aw).

The equality follows from the inductive definition of R. Similarly recognising
(wt w - 1) μ(w) = μ(aw), we then have

    E = ⟦aw⟧_ζ + μ(aw) h + ⟦R(aw)⟧_ζ 

and thus

    ⟦aw⟧_ζ = ⟦aw⟧_e + z^{wt(aw)} σ (⟦aw⟧_ζ + μ(aw) h + ⟦R(aw)⟧_ζ)

proving aw ∈ P. □


@3.6.
Let us from now on fix a serpentine element ζ ∈ Ω; there is at most one
by separatedness of Ω. We may then speak of _the_ serpentine Lie subalgebra
S ⊂ Ω.

*Lemma.* 
  1. ⟦-⟧_ζ : ℂW → S is surjective, 
  2. ω acts diagonalisably on ℂW,
  3. ad_h acts diagonalisably on S,
  4. eigenspaces of ω are mapped onto eigenspaces of ad_h.

Proof. By the Jacobi identity, every nested bracket of copies of ζ,τζ in Ω
is a linear combination of right-associated iterated brackets of these elements,
proving (1). Statement (2) is immediate by construction of ω. Now, we have a
linear surjection ℂW → S intertwining a pair of operator. Since the one acting on the
domain is diagonalisable, it follows that so is the one acting on the codomain, and
eigenspaces of the latter are images of those of the former. □

*Lemma.* Suppose w₁,…,w_n ∈ W; c₁,…,c_n ∈ ℂ; λ ∈ ℤ satisfy

 wt(w_i) = λ for all i,
 Σ c_i ⟦w_i⟧_e = 0,
 Σ c_i ⟦R_{w_i}⟧_ζ = 0.

Then Σ c_i ⟦w_i⟧_ζ = 0.

Proof. Note that by Lemma 3.2.2, Σ c_i μ(w_i)=0. Then, letting x = Σ c_i ⟦w_i⟧_ζ ∈ Ω,
we have x = z^λ σ x by Proposition 3.5. It follows that x ∈ ∩_k F^k Ω for every 
σ-filtration F^∙Ω, and thus x = 0 by separatedness of Ω. □

@3.7.
Proposition 3.5. provides a corecursive expression for each of the elements ⟦w⟧_ζ, w ∈ Ω,
spanning the serpentine Lie algebra S over ℂ. By the above Lemma, this evaluation bracket is
essentially determined by the rest R(w), along with easily computable data. Now, observe
that R(w) is contained in the subspace of ℂW spanned words of length at most l(w)-1:
this follows from the inductive definition of R. That will allow us to find relations
between evaluation brackets, i.e. elements in the kernel of ⟦-⟧_ζ : ℂW → Ω, by induction on
word length.

Let us first introduce a sequence of elements ε_k ∈ W, k≥1:

  ε₁=a, ε₂=ba, ε₃=aba, ε_k = …ababa

so that l(ε_k)=k, and wt(ε_k)=k mod 2.

*Lemma.* μ(ε_k) = (-1)^{k-1} 2^{⌊k/2⌋}.

Proof. We proceed by induction on k>0. Base case follows from
μ(ε₁)=μ(a)=1. Split the inductive step into even and odd cases,
and use the inductive definition of μ.
 
Assuming the formula holds for k=2m, we have:

  μ(ε_{2m+1}) = μ(aε_{2m}) 
              = -μ(ε_{2m}) 
              = 2^m 
              = (-1)^{(2m+1)-1} 2^{⌊(2m+1)/2⌋}.
  
Assuming the formula holds for k=2m+1, we have:

  μ(ε_{2m+2}) = μ(bε_{2m+1}) 
              = -2μ(ε_{2m+1})
              = -2 ∙ 2^m 
              = (-1)^{(2m+2)-1} 2^⌊(2m+2)/2⌋},
  
concluding the inductive step. □

*Proposition.* 
    1. ⟦a ε_k⟧_ζ = 0 for odd k,
    2. ⟦(1 + τ) ε_k⟧_ζ = 0 for even k,
    3. ⟦R(ε_k)⟧_ζ = (1 - τ) Σ_{1≤i≤k-1} (-1)^{k-i} 2^{⌊k/2⌋ - ⌊i/2⌋} ⟦ε_i⟧_ζ for all k.

Proof. Introduce the following sets: 
 * P₁: odd integers for which (1) holds,
 * P₂: even positive integers for which (2) holds,
 * P = P₁ ∪ P₂
 * Q: positive integers for which (3) holds.
We will prove the following claims:
 (a) ∀ k>0. {1,…,k-1} ⊂ P ∧ k-1 ∈ Q ⇒ k ∈ Q,
 (b) ∀ k>0. {1,…,k-1} ⊂ P ∧ k   ∈ Q ⇒ k ∈ P.
By mutual induction, these will imply P = Q = ℕ \ {0} (note that 1 ∈ Q trivially), completing
the proof of the Proposition.

For claim (b), case k = 2m-1, we have:

    wt (a ε_{2m-1}) = 2 ⇒ ⟦a ε_{2m-1}⟧_e = 0
  
and

    R(a ε_{2m-1})     = a R(ε_{2m-1}) + R(ε_{2m-1}) + ω R(ε_{2m-1}) + 2 ε_{2m-1} - 2^m a  
                      = (a + 1 + ω) R(ε_{2m-1}) + 2 ε_{2m-1} - 2^m a;
                     
so that, using {1,…,2m-2} ⊂ P and 2m-1 ∈ Q,¹

    R(a ε_{2m-1}) = (a + 1 + ω) (1 - τ) Σ_{1≤i≤2m-2} (-1)^{2m-1-i} 2^{m-1 - ⌊i/2⌋} ε_i + 2 ε_{2m-1} - 2^m a 
                  =   Σ_{1≤i≤2m-3 odd}  2^{m-1 - (i-1)/2} (2ε_i + ε_{i+1})  
                  - 2 Σ_{2≤i≤2m-2 even} 2^{m-1 - i/2} (ε_{i+1} + ε_i)
                  + 2 ε_{2m-1} - 2^m a 
                  = 2^m ε₁ + Σ_{3≤i≤2m-3 odd} 2^{⌊m-1⌋ - (i-1)/2} (2ε_i - 2ε_i)
                  - 2 ε_{2m-1} + Σ_{2≤i≤2m-2 even} 2^{⌊m-1⌋ - i/2} (-2ε_i + 2ε_i)
                  + 2 ε_{2m-1} - 2^m ε₁ 
                  = 0 (mod ker ⟦-⟧_ζ)

whence ⟦a ε_{2m-1}⟧_ζ = 0 by Lemma 3.6.2.
                   
[1] We compute in ℂW modulo ker(⟦-⟧_ζ), instead of Ω, to keep notation cleaner.
  
For claim (b), case k = 2m, we have:

    wt(ε_{2m}) = wt(τ ε_{2m}) = 0 ⇒ ⟦(1+τ) ε_{2m}⟧_e = c (1+τ)h = 0

and

    ⟦R((1+τ) ε_{2m})⟧_ζ ∈ (1 + τ)(1 - τ) Ω = 0

whence ⟦(1+τ) ε_{2m-1}⟧_ζ = 0 by Lemma 3.6.2.

For claim (a), case k = 2m, we have:

    R(ε_{2m}) = R(b ε_{2m-1})     
              = b R(ε_{2m-1}) - R(ε_{2m-1}) - ω R(ε_{2m-1}) - 2 ε_{2m-1} + 2^m b 
              = (b - 1 - ω) R(ε_{2m-1}) - 2 ε_{2m-1} + 2^m b;

so that, using {1,…,2m-1} ⊂ P and 2m-1 ∈ Q,

    R(ε_{2m}) = (b - 1 - ω) (1 - τ) Σ_{1≤i≤2m-2} (-1)^{2m-1-i} 2^{m-1 - ⌊i/2⌋} ε_i - 2 ε_{2m-1} + 2^m b
              = Σ_{1≤i≤2m-3 odd}  2^{m-1 - (i-1)/2} (ε_{i+1} - 2ε_i) 
              - Σ_{2≤i≤2m-2 even} 2^{m-1 - i/2} (-2τε_{i+1} - 2ε_i) 
              - 2 ε_{2m-1} + 2^m b
              = -2^m ε₁ + 2τε_{2m-1} + Σ_{3≤i≤2m-3 odd}  2^{m-1 - (i-1)/2} (-2ε_i+2τε_i) 
              + Σ_{2≤i≤2m-2 even} 2^{m-1 - i/2} (2ε_i + 2ε_i) 
              - 2 ε_{2m-1} + 2^m τε₁
              = Σ_{1≤i≤2m-1} 2^{m - ⌊i/2⌋} (1 - τ) (-1)^i ε_i (mod ker ⟦-⟧_ζ) 

whence ⟦R(ε_{2m}⟧_ζ = (1-τ) Σ_{1≤i≤2m-1} (-1)^{2m-i} 2^{m - ⌊i/2⌋} ⟦ε_i⟧_ζ.

For claim (a), case k = 2m+1, we have:

    R(ε_{2m+1}) = R(a ε_{2m})
                = a R(ε_{2m}) + ω R(ε_{2m}) + 2^{m+1} a 

so that, using {1,…,2m} ⊂ P and 2m ∈ Q,

    R(ε_{2m+1}) = (a + ω) (1 - τ) Σ_{1≤i≤2m-1} (-1)^{2m-i} 2^{m - ⌊i/2⌋} ε_i + 2^{m+1} a
                = Σ_{2≤i≤2m-2 even} 2^{m - i/2} (2ε_{i+1})
                - Σ_{1≤i≤2m-1 odd} 2^{m - (i-1)/2} (ε_i + ε_{i+1} + τε_i)
                + 2^{m+1} a
                = -2^m (1+τ) ε_1 + Σ_{3≤i≤2m-1 odd} 2^{m - (i-1)/2} (2ε_i - (1+τ)ε_i)
                - Σ_{2≤i≤2m even} 2^{m - i/2} 2ε_i
                + 2^{m+1} ε_1
                = Σ_{1≤i≤2m+1} 2^{m - ⌊i/2⌋} (1-τ) (-1)^{i+1} ε_i (mod ker ⟦-⟧_ζ) 

whence ⟦R(ε_{2m+1}⟧_ζ = (1-τ) Σ_{1≤i≤2m} (-1)^{2m+1-i} 2^{m - ⌊i/2⌋} ⟦ε_i⟧_ζ. □

@3.8.

*Lemma.* Suppose Σ c_i ⟦ε_i⟧_ζ = 0 with c₁,c₂,… ∈ ℂ (almost all zero). Then
 Σ c_i ⟦R(ε_i)⟧_ζ  = 0.

Proof. Set μ_i = μ(ε_i) = , and note that 

    ⟦ε_i⟧_e = { μ_i e     i odd,  
              ; μ_i h     i even
              }

By Lemma 3.6.1 (decomposing S into eigenspaces of ad_h), we may WLOG 
assume that all i such that c_i≠0 have the same parity. In the odd case,

      0 = Σ c_i ⟦ε_i⟧_ζ 
        = Σ c_i [ μ_i e + z σ (⟦ε_i⟧_ζ + μ_i h + ⟦R(ε_i)⟧_ζ) ]
        = (Σ c_i μ_i)(e + z σ h) + z σ (Σ c_i ⟦R(ε_i)⟧_ζ).
  
Taking its value in Ω / F¹Ω for a σ-filtration F^∙Ω, we have

    0 = (Σ c_i μ_i) e mod F¹Ω

so that Σ c_i μ_i = 0. Then, since z is invertible and σ is injective,
it follows that Σ c_i ⟦R(ε_i)⟧_ζ = 0.

In the even case,

      0 = Σ c_i ⟦ε_i⟧_ζ 
        = Σ c_i [ μ_i h + σ (⟦ε_i⟧_ζ + μ_i h + ⟦R(ε_i)⟧_ζ) ]
        = (Σ c_i μ_i)(h + σ h) + σ (Σ c_i ⟦R(ε_i)⟧_ζ).

Taking its value in Ω / F¹Ω we have once again Σ c_i μ_i = 0, and
it follows that Σ c_i ⟦R(ε_i)⟧_ζ = 0. □

Define

    E₀  = { ε_{2j}   | j > 0 }
    E₁  = { ε_{2j+1} | j ≥ 0 }
    E₋₁ = τ E₁

and E = E₁ ∪ E₀ ∪ E₋₁ ⊂ W. Consider the subspace ℂE ⊂ ℂW and the
restriction of the evaluation bracket ⟦ - ⟧_ζ.  

*Lemma.* ⟦ - ⟧_ζ : ℂE → S is injective. 

Proof. Let Z ⊂ ℂE be the kernel of ⟦ - ⟧_ζ : ℂE → S. By Lemma 3.6.1,
Z decomposes into eigenspaces of ω:

    Z = Z₁ ⊕ Z₀ ⊕ Z₋₁,  Z_d ⊂ ℂE_d

with Z₋₁ = τ Z₁. Now, let F^∙Z₀, F^∙Z₁ be the filtration by word length,
so that

    F^k Z_d = { w ∈ E_d | ⟦w⟧_ζ = 0 and l(w)≤k }.

We will show that there are injective maps

  F^{2j+1} Z₁ → F^{2j} Z₀ → F^{2j-1} Z₁

for all j ≥ 1. It then follows that Z₁ = F¹ Z₁ = 0 and thus also Z₀ = 0.

Let P_λ : ℂE → ℂE, λ ∈ {-1,0,1}, denote the projections onto eigenspaces
of ω with eigenvalue λ. Note that the restriction of R : W → ℂW to E factors
through ℂE (by Proposition 3.7.) and extends to a linear map

    R~ : ℂE → ℂE.

Define

    R₁ = P₀ ∘ R~|_{ℂE₁} : ℂE₁ → ℂE₀ 
    R₀ = P₁ ∘ R~|_{ℂE₀} : ℂE₀ → ℂE₁.

By Lemma 3.8.1., R₁(Z₁) ⊂ Z₀ and R₀(Z₀) ⊂ Z₁. In fact, since R maps words
of given length to combinations of words of strictly lower length, we have

    R₁(F^{2j+1}Z₁) ⊂ F^{2j}Z₀,  R₀(F^{2j}Z₀) ⊂ F^{2j-1}Z₁.

Now, we have ker(R₁) = ℂε₁, ker(R₀) = 0 so that ker(R_d) ∩ Z_d = 0. It follows
that restrictions of R₁, respectively R₀, to F^{2j+1}Z₁, respectively F^{2j}Z₀,
provide the desired injections. □

*Proposition.* ⟦ - ⟧_ζ : ℂE → S is an isomorphism of vector spaces.

Proof. The above Lemma proves injectivity. Since the full bracket ℂW → S is 
surjective, it is enough to show that for each w ∈ W there is ε ∈ E and c ∈ ℂ
such that ⟦w⟧_ζ = c⟦ε⟧_ζ. We use the induction scheme of Lemma 3.1.1, letting P ⊂ W
be the set of words satisfying the latter condition. First, ⟦a⟧_ζ = ⟦ε₁⟧_ζ so a ∈ P.
Second, τE = E so τP = P. Finally, ⟦aE⟧_ζ ⊂ ⟦E⟧_ζ by Proposition 3.7. so aP ⊂ P. □

@3.9.
Consider the lattice ℤ², and the subset

  Φ = { (n, j) | n>0, |j|≤1, n+j ∈ 2ℤ }.

Figure:

 j│
  │  
 1│ *   *   *   *   *    … 
 0┼───*───*───*───*─── …─────
-1│ *   *   *   *   *    … 
  │ 1 2 …                   n
  │  
Define S_γ ⊂ Ω for γ ∈ ℤ² by:

    S_{(2k,0)}     = ℂ ⟦ε_{2k}⟧_ζ    for k > 0
    S_{(2k+1,1)}   = ℂ ⟦ε_{2k+1}⟧_ζ  for k ≥ 0
    S_{(2k+1,-1)}  = τ S_{(2k+1,1)}  for k ≥ 0
    S_γ            = 0               for γ ∉ Φ. 

The following gives a complete description of the 
structure of S in terms of a root space decomposition.

*Proposition.* 
 1. ⟦w⟧_ζ ∈ S_{(l(w), wt(w))} for all w ∈ W;
 2. [S_γ, S_δ] ⊂ S_{γ+δ} for all γ,δ ∈ ℤ², with equality if γ,δ ∈ Φ;  
 3. S = Σ_{γ ∈ Φ} S_γ is a direct sum.

Proof. We prove (1) by the induction scheme of Lemma  3.1.1, letting P ⊂ W
be the set of words w ∈ W satisfying ⟦w⟧_ζ ∈ S_{(l(w), wt(w))}. We have a ∈ P
since S_{1,1} is spanned by ⟦ε₁⟧_ζ = ⟦a⟧_ζ. Furthermore, τ S_{n,j} = S_{n,-j}
so τ P = P. Finally, [ζ, S_{n,j}] ⊂ S_{n+1,j+1} so a P ⊂ P. 

Now, for (2) we only need to check that 

    [ ⟦w⟧_ζ, ⟦w'⟧_ζ ] = Σ c_i ⟦w⟧_ζ

with l(w_i) = l(w) + l(w') and wt(w_i) = wt(w) + wt(w'). This follows from
reassociating nested Lie brackets by Jacobi identity.

Finally, (3) follows from Proposition 3.8. □

@3.10.
*Lemma.* Let M ⊃ S be a Lie algebra with a chosen set of generators,
M' another Lie algebra, and f : M → M' a vector space homomorphism
such that [f(s), f(m)] = f([s,m]) for all s ∈ S, m ∈ M. Then f is a
Lie algebra homomorphism.

Proof. Let FL(S) be the free Lie algebra on S, and let ι : S → M and
j : S → FL(S) be the natural inclusions of generators. By the universal
property, there are Lie algebra homomorphisms 

    g : FL(S) → M,  g ∘ j = ι
    f~: FL(S) → M', f~∘ j = ι ∘ f

so that the left triangle and the outer square commute in the following
diagram:

    FL(S)
 j /    \ f~
 S  g↓   M' 
 ι \   / f
     M  

By the hypothesis on f, the right triangle commutes as well: indeed,
for any right-associated iterated bracket x = [s_n, […[s₁,s₀]…]] of generators 
in FL(S), we have 

  f~(x) = [f~(js_n), […[f~(js₁),f~(js₀)]…]]
        = [f (ιs_n), […[f (ιs₁),f (ιs₀)]…]]
        = f(g(x)).

In particular, f~(ker g) = 0 so that f~ descends to a Lie algebra
homomorphism M → M' necessarily coinciding with f. □ 

*Proof of Theorem 2.4.*
By the above Lemma, it will be enough to construct a vector space
isomorphism Ψ : L₊^ℂ → S such that Ψ ∘ τ = τ ∘ Ψ and

    Ψ([te,x]) = [e, Ψ(x)]

for all x ∈ L₊^ℂ. We define Ψ as a composite 

         ψ      ⟦-⟧_ζ      
  L₊^ℂ   →   ℂE   →   Ω

  ψ(t^{2k}   h) = -2^{-k} ε_{2k}
  ψ(t^{2k+1} e) =  2^{-k} ε_{2k+1}
  ψ(t^{2k+1} f) = -τ ψ(t^{2k+1} e).

Now, computing

    Ψ([te, t^{2k} h]) = Ψ(-t^{2k+1}e) 
                      = -2^{-k} ⟦ε_{2k+1}⟧_ζ 
                      = -2^{-k} ⟦aε_{2k}⟧_ζ 
                      = [Ψ(te), Ψ(t^{2k}h)]

    Ψ([te, t^{2k+1} e]) = 0 = [Ψ(te), Ψ(t^{2k+1}e)] 
    
    Ψ([te, t^{2k+1} f]) = Ψ(-2t^{2k+2}h) 
                        = 2^{-k} ⟦ε_{2k+2}⟧_ζ
                        = -2^{-k} ⟦aτε_{2k+1}⟧_ζ 
                        = [Ψ(te), Ψ(t^{2k+1}f)]

we have verified that Ψ satisfies the hypotheses of the Lemma. This
concludes the proof of the Theorem. □


